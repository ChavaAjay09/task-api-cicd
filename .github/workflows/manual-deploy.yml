name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image_tag:
        description: 'Docker image tag to deploy (default: latest)'
        required: false
        default: 'latest'
        type: string
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
          --health-start-period 40s

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Run tests
      run: mvn clean test
      env:
        MONGODB_URI: mongodb://localhost:27017/tasksdb_test

  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || inputs.skip_tests)
    environment: ${{ inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy to ${{ inputs.environment }}
      run: |
        echo "Deploying to ${{ inputs.environment }} environment..."
        echo "Using image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}"
        
        # Example deployment commands (customize based on your infrastructure)
        # For Kubernetes:
        # kubectl set image deployment/task-api task-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }} -n ${{ inputs.environment }}
        
        # For Docker Compose:
        # export IMAGE_TAG=${{ inputs.image_tag }}
        # docker-compose -f docker-compose.${{ inputs.environment }}.yml up -d
        
        # For cloud providers (AWS ECS, Azure Container Instances, etc.):
        # Add your specific deployment commands here
        
        echo "Deployment completed successfully!"

    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        # Add health check or verification commands here
        # curl -f http://your-app-url/actuator/health
        echo "Deployment verification completed!"

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Manual deployment to ${{ inputs.environment }} successful!"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}"
        # Add notification logic here (Slack, Teams, email, etc.)

    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Manual deployment to ${{ inputs.environment }} failed!"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}"
        # Add notification logic here (Slack, Teams, email, etc.)
